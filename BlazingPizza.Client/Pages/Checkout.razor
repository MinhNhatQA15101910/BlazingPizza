@page "/checkout"
@implements IDisposable
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@using Services

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">
    <EditForm EditContext="editContext" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Please enter address information.</div>
                }
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="submit" disabled=@(isError || isSubmitting)>
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code 
{
    private EditContext editContext;
    private bool isError = false;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        editContext = new(OrderState.Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private async Task PlaceOrder()
    {
        isSubmitting = true;
        
        try 
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}